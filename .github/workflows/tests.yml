name: Run tests

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CLICOLOR: 1

jobs:
  build:
    name: CI
    runs-on: ubuntu-latest
    needs: [test, lockfile, rustfmt, clippy]

    permissions:
      contents: none

    if: "always()"
    steps:
      - name: Run failed
        if: "contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped')"
        run: exit 1

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
    continue-on-error: ${{ matrix.rust != 'nightly' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache Rust dependencies
      - uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo test --no-run

      - name: Test
        run: cargo test

  lockfile:
    name: Check if lockfile is up-to-date
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check if lockfile is up-to-date
        run: cargo update --workspace --locked

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Cache Rust dependencies
      - uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: clippy
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install SARIF tools
        run: |
          cargo install clippy-sarif --locked
          cargo install sarif-fmt --locked

      - name: Check
        run: |
          cargo clippy --workspace --all-features --all-targets --message-format=json \
          | clippy-sarif \
          | tee clippy-results.sarif \
          | sarif-fmt
        continue-on-error: true

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: clippy-results.sarif
          wait-for-processing: true

      - name: Report status
        run: cargo clippy --workspace --all-features --all-targets -- -D warnings --allow deprecated
